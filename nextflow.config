params {
    workflows               = 'demo'
    outdir                  = 'results'

    general.wf_opts         = '-resume -ansi-log false'    

    demo.input              = null
    demo.params_file        = null
    demo.wf_opts            = null
    demo.add_config         = null
    
    fetchngs.input          = null
    fetchngs.params_file    = null
    fetchngs.wf_opts        = null
    fetchngs.add_config     = null

    rnaseq.input            = null
    rnaseq.params_file      = null
    rnaseq.wf_opts          = null
    rnaseq.add_config       = null

    taxprofiler.input       = null
    taxprofiler.params_file = null
    taxprofiler.wf_opts     = null
    taxprofiler.add_config  = null

    mag.input               = null
    mag.params_file         = null
    mag.wf_opts             = null 
    mag.add_config          = null

    funcscan.input          = null
    funcscan.params_file    = null
    funcscan.wf_opts        = null
    funcscan.add_config     = null
}

resume = true

process {
    errorStrategy = 'finish' // Important, otherwise concurrent running of workflows may kill the other on error leaving a lock file present
    withName: 'NFCORE_DEMO' {
        publishDir = "$params.outdir/nf-core-demo"
    }
    withName: 'NFCORE_FETCHNGS' {
        publishDir = "$params.outdir/nf-core-fetchngs"
    }
    withName: 'NFCORE_RNASEQ' {
        publishDir = "$params.outdir/nf-core-rnaseq"
    }
    withName: 'NFCORE_TAXPROFILER' {
        publishDir = "$params.outdir/nf-core-taxprofiler"
    }
    withName: 'NFCORE_MAG' {
        publishDir = "$params.outdir/nf-core-mag"
    }
    withName: 'NFCORE_FUNCSCAN' {
        publishDir = "$params.outdir/nf-core-funcscan"
    }
}

profiles {
    // * CAUTION: This uses code to access something that isn't normally exposed.
    demo {
        params {
            workflows               = 'demo'
            general.wf_opts         = [
                '-resume ',
                '-ansi-log false ',
                '-profile test',
                'singularity' in this.conditionValues.profiles ? ',singularity' : '',
                'docker' in this.conditionValues.profiles ? ',docker' : '',
            ].join('')
        }
    }
    cascade {
        params {
            workflows               = 'fetchngs,taxprofiler,mag,funcscan'
            general.wf_opts         = [
                '-resume ',
                '-ansi-log false ',
                '-profile test',
                'singularity' in this.conditionValues.profiles ? ',singularity' : '',
                'docker' in this.conditionValues.profiles ? ',docker' : '',
            ].join('')
            fetchngs.wf_opts        = '-r dev'
            fetchngs.params_file    = "$projectDir/tests/data/fetchngs_taxprofiler_params.yml"
            fetchngs.input          = "$projectDir/tests/data/fetchngs_taxprofiler_samplesheet.csv"
            mag.params_file         = "$projectDir/tests/data/mag_params.yml"
        }
    }
    singularity {
        singularity.enabled         = true
        if( ['demo','cascade'].disjoint( this.conditionValues.profiles ) ) {
            params.general.wf_opts  = '-resume -ansi-log false -profile singularity'
        }
    }
    docker {
        docker.enabled              = true
        if( ['demo','cascade'].disjoint( this.conditionValues.profiles ) ) {
            params.general.wf_opts  = '-resume -ansi-log false -profile docker'
        }
        params {
            demo.add_config         = "$projectDir/configs/multiqc.config"
            fetchngs.add_config     = "$projectDir/configs/multiqc.config"
            rnaseq.add_config       = "$projectDir/configs/multiqc.config"
            taxprofiler.add_config  = "$projectDir/configs/multiqc.config"
            mag.add_config          = "$projectDir/configs/multiqc.config"
            funcscan.add_config     = "$projectDir/configs/multiqc.config"
        }
    }
}